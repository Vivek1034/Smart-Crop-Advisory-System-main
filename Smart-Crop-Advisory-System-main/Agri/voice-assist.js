// Voice Assistance for KrishiVaani App with Multi-Language Support
// Uses Web Speech API for speech recognition and synthesis

// Global language settings
let currentLanguage = localStorage.getItem('voiceLanguage') || 'en-IN';
let currentLangCode = localStorage.getItem('voiceLangCode') || 'EN';

// Multi-language text translations
const translations = {
    'en-IN': {
        welcome: 'Hello! I am your KrishiVaani voice assistant. Where would you like to go?',
        listening: 'ЁЯОд Listening...',
        processing: 'тЪб Processing...',
        clickToSpeak: 'ЁЯСВ Click to speak',
        browserNotSupported: 'Sorry, your browser does not support voice recognition.',
        errorOccurred: 'тЭМ Error occurred',
        voiceError: 'Voice recognition error: ',
        dashboardHelp: 'I can help you with dashboard features like crop recommendation, yield prediction, crop planning, price tracker, disease prediction, forum, labour alerts, crop calendar, AI chat, weather, disease guide, organic farming, plantation guide, farmer portal, or shopkeeper portal.',
        generalHelp: 'I can help you navigate to different pages. Try saying: dashboard, login, about, contact, weather, disease detection, organic farming, plantation guide, farmer portal, or shopkeeper portal.',
        notUnderstood: 'I did not understand that command. Try saying dashboard, login, about, contact, or help for available options.',
        dashboardNotUnderstood: 'I did not understand that command. Try saying crop recommendation, yield prediction, crop planning, price tracker, disease prediction, forum, weather, or help for available options.',
        navigatingTo: 'Navigating to ',
        opening: 'Opening '
    },
    'hi-IN': {
        welcome: 'рдирдорд╕реНрдХрд╛рд░! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐рд╡рд╛рдгреА рдЖрд╡рд╛рдЬ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдк рдХрд╣рд╛рдВ рдЬрд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?',
        listening: 'ЁЯОд рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...',
        processing: 'тЪб рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ...',
        clickToSpeak: 'ЁЯСВ рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ',
        browserNotSupported: 'рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдЖрдкрдХрд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдЖрд╡рд╛рдЬ рдкрд╣рдЪрд╛рди рдХрд╛ рд╕рдорд░реНрдерди рдирд╣реАрдВ рдХрд░рддрд╛ред',
        errorOccurred: 'тЭМ рддреНрд░реБрдЯрд┐ рд╣реБрдИ',
        voiceError: 'рдЖрд╡рд╛рдЬ рдкрд╣рдЪрд╛рди рддреНрд░реБрдЯрд┐: ',
        dashboardHelp: 'рдореИрдВ рдбреИрд╢рдмреЛрд░реНрдб рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдЬреИрд╕реЗ рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢, рдЙрддреНрдкрд╛рджрди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди, рдлрд╕рд▓ рдпреЛрдЬрдирд╛, рдореВрд▓реНрдп рдЯреНрд░реИрдХрд░, рд░реЛрдЧ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди, рдлреЛрд░рдо, рд╢реНрд░рдо рдЕрд▓рд░реНрдЯ, рдлрд╕рд▓ рдХреИрд▓реЗрдВрдбрд░ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред',
        generalHelp: 'рдореИрдВ рд╡рд┐рднрд┐рдиреНрди рдкреГрд╖реНрдареЛрдВ рдкрд░ рдиреЗрд╡рд┐рдЧреЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдХрд╣реЗрдВ: рдбреИрд╢рдмреЛрд░реНрдб, рд▓реЙрдЧрд┐рди, рдмрд╛рд░реЗ рдореЗрдВ, рд╕рдВрдкрд░реНрдХ, рдореМрд╕рдо, рд░реЛрдЧ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдирд╛ред',
        notUnderstood: 'рдореИрдВ рдЙрд╕ рдХрдорд╛рдВрдб рдХреЛ рдирд╣реАрдВ рд╕рдордЭрд╛ред рдбреИрд╢рдмреЛрд░реНрдб, рд▓реЙрдЧрд┐рди, рдмрд╛рд░реЗ рдореЗрдВ, рд╕рдВрдкрд░реНрдХ, рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХрд╣рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
        dashboardNotUnderstood: 'рдореИрдВ рдЙрд╕ рдХрдорд╛рдВрдб рдХреЛ рдирд╣реАрдВ рд╕рдордЭрд╛ред рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢, рдЙрддреНрдкрд╛рджрди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди, рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХрд╣рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
        navigatingTo: 'рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ ',
        opening: 'рдЦреЛрд▓ рд░рд╣реЗ рд╣реИрдВ '
    },
    'bn-IN': {
        welcome: 'ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ржмрж╛ржгрзА ржнржпрж╝рзЗрж╕ рж╕рж╣рж╛ржпрж╝ржХред ржЖржкржирж┐ ржХрзЛржерж╛ржпрж╝ ржпрзЗрждрзЗ ржЪрж╛ржи?',
        listening: 'ЁЯОд рж╢рзБржиржЫрж┐...',
        processing: 'тЪб ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг...',
        clickToSpeak: 'ЁЯСВ ржХржерж╛ ржмрж▓рждрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        browserNotSupported: 'ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржнржпрж╝рзЗрж╕ рж░рж┐ржХржЧржирж┐рж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗ ржирж╛ред',
        errorOccurred: 'тЭМ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ',
        voiceError: 'ржнржпрж╝рзЗрж╕ рж░рж┐ржХржЧржирж┐рж╢ржи рждрзНрж░рзБржЯрж┐: ',
        dashboardHelp: 'ржЖржорж┐ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржпрзЗржоржи ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢, ржлрж▓ржи ржкрзВрж░рзНржмрж╛ржнрж╛рж╕, ржлрж╕рж▓ ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржирж┐ржпрж╝рзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред',
        generalHelp: 'ржЖржорж┐ ржмрж┐ржнрж┐ржирзНржи ржкрзГрж╖рзНржарж╛ржпрж╝ ржирзЗржнрж┐ржЧрзЗржЯ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржмрж▓рзБржи: ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб, рж▓ржЧржЗржи, рж╕ржорзНржкрж░рзНржХрзЗред',
        notUnderstood: 'ржЖржорж┐ рж╕рзЗржЗ ржХржорж╛ржирзНржбржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб, рж▓ржЧржЗржи, рж╕рж╛рж╣рж╛ржпрзНржп ржмрж▓рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        dashboardNotUnderstood: 'ржЖржорж┐ рж╕рзЗржЗ ржХржорж╛ржирзНржбржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢, ржлрж▓ржи ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржмрж▓рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        navigatingTo: 'ржпрж╛ржЪрзНржЫрж┐ ',
        opening: 'ржЦрзБрж▓ржЫрж┐ '
    },
    'te-IN': {
        welcome: 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А р░Хр▒Гр░╖р░┐р░╡р░╛р░гр░┐ р░╡р░╛р░пр░┐р░╕р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н. р░ор▒Ар░░р▒Б р░Ор░Хр▒Нр░Хр░бр░┐р░Хр░┐ р░╡р▒Жр░│р▒Нр░▓р░╛р░▓р░ир░┐ р░Ер░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?',
        listening: 'ЁЯОд р░╡р░┐р░Вр░Яр▒Бр░ир▒Нр░ир░╛р░ир▒Б...',
        processing: 'тЪб р░кр▒Нр░░р░╛р░╕р▒Жр░╕р░┐р░Вр░Чр▒Н...',
        clickToSpeak: 'ЁЯСВ р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Яр░╛р░ир░┐р░Хр░┐ р░Хр▒Нр░▓р░┐р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        browserNotSupported: 'р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ор▒А р░мр▒Нр░░р▒Мр░Ьр░░р▒Н р░╡р░╛р░пр░┐р░╕р▒Н р░░р░┐р░Хр░Чр▒Нр░ир░┐р░╖р░ир▒НтАМр░ир▒Б р░╕р░кр▒Лр░░р▒Нр░Яр▒Н р░Ър▒Зр░пр░жр▒Бред',
        errorOccurred: 'тЭМ р░▓р▒Лр░кр░В р░╕р░Вр░нр░╡р░┐р░Вр░Ър░┐р░Вр░жр░┐',
        voiceError: 'р░╡р░╛р░пр░┐р░╕р▒Н р░░р░┐р░Хр░Чр▒Нр░ир░┐р░╖р░ир▒Н р░▓р▒Лр░кр░В: ',
        dashboardHelp: 'р░ир▒Зр░ир▒Б р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н р░лр▒Ар░Ър░░р▒Нр░▓р▒Б р░Ер░пр░┐р░и р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б, р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Ер░Вр░Ър░ир░╛, р░кр░Вр░Я р░кр▒Нр░░р░гр░╛р░│р░┐р░Хр░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Бред',
        generalHelp: 'р░ир▒Зр░ир▒Б р░╡р░┐р░╡р░┐р░з р░кр▒Зр░Ьр▒Ар░▓р░Хр▒Б р░ир░╛р░╡р░┐р░Чр▒Зр░Яр▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Бред р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐: р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н, р░▓р░╛р░Чр░┐р░ир▒Нред',
        notUnderstood: 'р░ир▒Зр░ир▒Б р░Ж р░Хр░ор░╛р░Вр░бр▒НтАМр░ир▒Б р░Ер░░р▒Нр░ер░В р░Ър▒Зр░╕р▒Бр░Хр▒Лр░▓р▒Зр░Хр░кр▒Лр░пр░╛р░ир▒Б. р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н, р░▓р░╛р░Чр░┐р░ир▒Н р░Ер░ир░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐ред',
        dashboardNotUnderstood: 'р░ир▒Зр░ир▒Б р░Ж р░Хр░ор░╛р░Вр░бр▒НтАМр░ир▒Б р░Ер░░р▒Нр░ер░В р░Ър▒Зр░╕р▒Бр░Хр▒Лр░▓р▒Зр░Хр░кр▒Лр░пр░╛р░ир▒Бред р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ер░ир░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐ред',
        navigatingTo: 'р░╡р▒Жр░│р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ор▒Б ',
        opening: 'р░др▒Жр░░р▒Бр░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ор▒Б '
    },
    'mr-IN': {
        welcome: 'рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ рдХреГрд╖рд┐рд╡рд╛рдгреА рдЖрд╡рд╛рдЬ рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ. рддреБрдореНрд╣реА рдХреБрдареЗ рдЬрд╛рдК рдЗрдЪреНрдЫрд┐рддрд╛?',
        listening: 'ЁЯОд рдРрдХрдд рдЖрд╣реЗ...',
        processing: 'тЪб рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд░рдд рдЖрд╣реЗ...',
        clickToSpeak: 'ЁЯСВ рдмреЛрд▓рдгреНрдпрд╛рд╕рд╛рдареА рдХреНрд▓рд┐рдХ рдХрд░рд╛',
        browserNotSupported: 'рдХреНрд╖рдорд╕реНрд╡, рддреБрдордЪрд╛ рдмреНрд░рд╛рдЙрдЭрд░ рдЖрд╡рд╛рдЬ рдУрд│рдЦ рд╕рдорд░реНрдерд┐рдд рдХрд░рдд рдирд╛рд╣реА.',
        errorOccurred: 'тЭМ рддреНрд░реБрдЯреА рдЭрд╛рд▓реА',
        voiceError: 'рдЖрд╡рд╛рдЬ рдУрд│рдЦ рддреНрд░реБрдЯреА: ',
        dashboardHelp: 'рдореА рдбреЕрд╢рдмреЛрд░реНрдб рд╡реИрд╢рд┐рд╖реНрдЯреНрдпреЗ рдЬрд╕реЗ рдХреА рдкрд┐рдХ рд╢рд┐рдлрд╛рд░рд╕, рдЙрддреНрдкрд╛рджрди рдЕрдВрджрд╛рдЬ рдпрд╛рдордзреНрдпреЗ рдорджрдд рдХрд░реВ рд╢рдХрддреЛ.',
        generalHelp: 'рдореА рд╡рд┐рд╡рд┐рдз рдкреГрд╖реНрдард╛рдВрд╡рд░ рдиреЗрд╡реНрд╣рд┐рдЧреЗрдЯ рдХрд░рдгреНрдпрд╛рдд рдорджрдд рдХрд░реВ рд╢рдХрддреЛ. рдореНрд╣рдгрд╛: рдбреЕрд╢рдмреЛрд░реНрдб, рд▓реЙрдЧрд┐рди.',
        notUnderstood: 'рдорд▓рд╛ рддреЛ рдЖрджреЗрд╢ рд╕рдордЬрд▓рд╛ рдирд╛рд╣реА. рдбреЕрд╢рдмреЛрд░реНрдб, рд▓реЙрдЧрд┐рди рдореНрд╣рдгреВрди рдкрд╣рд╛.',
        dashboardNotUnderstood: 'рдорд▓рд╛ рддреЛ рдЖрджреЗрд╢ рд╕рдордЬрд▓рд╛ рдирд╛рд╣реА. рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕ рдореНрд╣рдгреВрди рдкрд╣рд╛.',
        navigatingTo: 'рдЬрд╛рдд рдЖрд╣реЗ ',
        opening: 'рдЙрдШрдбрдд рдЖрд╣реЗ '
    },
    'ta-IN': {
        welcome: 'ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН роХро┐ро░рпБро╖ро┐ро╡ро╛рогро┐ роХрпБро░ро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпН. роирпАроЩрпНроХро│рпН роОроЩрпНроХрпБ роЪрпЖро▓рпНро▓ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?',
        listening: 'ЁЯОд роХрпЗроЯрпНроЯрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒рпЗройрпН...',
        processing: 'тЪб роЪрпЖропро▓ро╛роХрпНроХроорпН...',
        clickToSpeak: 'ЁЯСВ рокрпЗроЪ роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН',
        browserNotSupported: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЙроЩрпНроХро│рпН роЙро▓ро╛ро╡ро┐ роХрпБро░ро▓рпН роЕроЯрпИропро╛ро│родрпНродрпИ роЖродро░ро┐роХрпНроХро╡ро┐ро▓рпНро▓рпИ.',
        errorOccurred: 'тЭМ рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ',
        voiceError: 'роХрпБро░ро▓рпН роЕроЯрпИропро╛ро│ рокро┐ро┤рпИ: ',
        dashboardHelp: 'роиро╛ройрпН роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ роЕроорпНроЪроЩрпНроХро│ро╛рой рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ, роороХроЪрпВро▓рпН роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокро┐ро▓рпН роЙродро╡ роорпБроЯро┐ропрпБроорпН.',
        generalHelp: 'роиро╛ройрпН ро╡рпЖро╡рпНро╡рпЗро▒рпБ рокроХрпНроХроЩрпНроХро│рпБроХрпНроХрпБ роЪрпЖро▓рпНро▓ роЙродро╡ роорпБроЯро┐ропрпБроорпН. роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН: роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ, роЙро│рпНроирпБро┤рпИро╡рпБ.',
        notUnderstood: 'роЕроирпНрод роХроЯрпНроЯро│рпИропрпИ роОройрпНройро╛ро▓рпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ роОройрпНро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.',
        dashboardNotUnderstood: 'роЕроирпНрод роХроЯрпНроЯро│рпИропрпИ роОройрпНройро╛ро▓рпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ роОройрпНро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.',
        navigatingTo: 'роЪрпЖро▓рпНроХро┐ро▒рпЛроорпН ',
        opening: 'родро┐ро▒роХрпНроХро┐ро▒рпЛроорпН '
    }
};

function speak(text, language = currentLanguage) {
    if ('speechSynthesis' in window) {
        const utter = new SpeechSynthesisUtterance(text);
        utter.lang = language;
        utter.rate = 0.9;
        utter.pitch = 1.0;
        window.speechSynthesis.speak(utter);
    }
}

function getTranslation(key, language = currentLanguage) {
    return translations[language]?.[key] || translations['en-IN'][key] || key;
}

function startRecognition(targetInput, promptText) {
    if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
        speak(getTranslation('browserNotSupported'));
        return;
    }
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.lang = currentLanguage;
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    speak(promptText);
    recognition.start();
    recognition.onresult = function(event) {
        const transcript = event.results[0][0].transcript.trim();
        targetInput.value = transcript;
        speak(getTranslation('opening') + transcript);
    };
    recognition.onerror = function(event) {
        speak(getTranslation('voiceError') + event.error);
    };
}

// Voice Navigation for Main App
function handleVoiceCommand(command) {
    const cmd = command.toLowerCase().trim();
    const currentPage = window.location.pathname.split('/').pop();
    
    // Dashboard-specific commands
    if (currentPage === 'dashboard.html') {
        if (cmd.includes('crop recommendation') || cmd.includes('recommend crop') || cmd.includes('рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢') || cmd.includes('ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢') || cmd.includes('р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б') || cmd.includes('рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕') || cmd.includes('рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ')) {
            speak(getTranslation('opening') + 'crop recommendation system');
            window.location.href = 'Crop Recommendation/templates/index.html';
        } else if (cmd.includes('yield prediction') || cmd.includes('predict yield') || cmd.includes('рдЙрддреНрдкрд╛рджрди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди') || cmd.includes('ржлрж▓ржи ржкрзВрж░рзНржмрж╛ржнрж╛рж╕') || cmd.includes('р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Ер░Вр░Ър░ир░╛') || cmd.includes('рдЙрддреНрдкрд╛рджрди рдЕрдВрджрд╛рдЬ') || cmd.includes('роороХроЪрпВро▓рпН роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ')) {
            speak(getTranslation('opening') + 'crop yield prediction');
            window.location.href = 'Crop Yield Prediction/templates/index.html';
        } else if (cmd.includes('crop planning') || cmd.includes('plan crop') || cmd.includes('рдлрд╕рд▓ рдпреЛрдЬрдирд╛') || cmd.includes('ржлрж╕рж▓ ржкрж░рж┐ржХрж▓рзНржкржирж╛') || cmd.includes('р░кр░Вр░Я р░кр▒Нр░░р░гр░╛р░│р░┐р░Х') || cmd.includes('рдкреАрдХ рдпреЛрдЬрдирд╛') || cmd.includes('рокропро┐ро░рпН родро┐роЯрпНроЯроорпН')) {
            speak(getTranslation('opening') + 'crop planning tool');
            window.location.href = 'Crop_Planning/templates/cropplan.html';
        } else if (cmd.includes('price tracker') || cmd.includes('crop price') || cmd.includes('рдореВрд▓реНрдп рдЯреНрд░реИрдХрд░') || cmd.includes('ржжрж╛ржо ржЯрзНрж░рзНржпрж╛ржХрж╛рж░') || cmd.includes('р░зр░░ р░Яр▒Нр░░р░╛р░Хр░░р▒Н') || cmd.includes('рдХрд┐рдВрдордд рдЯреНрд░реЕрдХрд░') || cmd.includes('ро╡ро┐ро▓рпИ роХрогрпНроХро╛рогро┐рокрпНрокро╛ро│ро░рпН')) {
            speak(getTranslation('opening') + 'crop price tracker');
            window.location.href = 'Crop_Prices_Tracker/templates/crop_price_tracker.html';
        } else if (cmd.includes('disease prediction') || cmd.includes('detect disease') || cmd.includes('рд░реЛрдЧ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди') || cmd.includes('рж░рзЛржЧ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕') || cmd.includes('р░╡р▒Нр░пр░╛р░зр░┐ р░Ер░Вр░Ър░ир░╛') || cmd.includes('рд░реЛрдЧ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди') || cmd.includes('роирпЛропрпН роХрогро┐рокрпНрокрпБ')) {
            speak(getTranslation('opening') + 'disease prediction system');
            window.location.href = 'Decises_Prediction/template/index.html';
        } else if (cmd.includes('forum') || cmd.includes('community') || cmd.includes('рдлреЛрд░рдо') || cmd.includes('ржлрзЛрж░рж╛ржо') || cmd.includes('р░лр▒Лр░░р░ор▒Н') || cmd.includes('рдлреЛрд░рдо') || cmd.includes('рооройрпНро▒роорпН')) {
            speak(getTranslation('opening') + 'community forum');
            window.location.href = 'Forum/forum.html';
        } else if (cmd.includes('labour alerts') || cmd.includes('labor alert') || cmd.includes('рд╢реНрд░рдо рдЕрд▓рд░реНрдЯ') || cmd.includes('рж╢рзНрж░ржо рж╕рждрж░рзНржХрждрж╛') || cmd.includes('р░Хр░╛р░░р▒Нр░ор░┐р░Х р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б') || cmd.includes('рд╢реНрд░рдо рдЕрд▓рд░реНрдЯ') || cmd.includes('родрпКро┤ро┐ро▓ро╛ро│ро░рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН')) {
            speak(getTranslation('opening') + 'labour alerts');
            window.location.href = 'Labour_Alerts/tamplates/labour-alerts.html';
        } else if (cmd.includes('calendar') || cmd.includes('crop calendar') || cmd.includes('рдХреИрд▓реЗрдВрдбрд░') || cmd.includes('ржХрзНржпрж╛рж▓рзЗржирзНржбрж╛рж░') || cmd.includes('р░Хр▒Нр░пр░╛р░▓р▒Жр░Вр░бр░░р▒Н') || cmd.includes('рдХреИрд▓реЗрдВрдбрд░') || cmd.includes('роиро╛роЯрпНроХро╛роЯрпНроЯро┐')) {
            speak(getTranslation('opening') + 'crop calendar');
            window.location.href = 'cropCalendar.html';
        } else if (cmd.includes('chat') || cmd.includes('ai chat') || cmd.includes('рдЪреИрдЯ') || cmd.includes('ржЪрзНржпрж╛ржЯ') || cmd.includes('р░Ър░╛р░Яр▒Н') || cmd.includes('рдЪреИрдЯ') || cmd.includes('роЕро░роЯрпНроЯрпИ')) {
            speak(getTranslation('opening') + 'AI chat assistant');
            window.location.href = 'chat.html';
        }
        // Continue with general navigation commands
        else if (cmd.includes('weather')) {
            speak('Navigating to weather information');
            window.location.href = 'weather.html';
        } else if (cmd.includes('disease guide') || cmd.includes('plant disease guide')) {
            speak('Navigating to disease guide');
            window.location.href = 'disease.html';
        } else if (cmd.includes('organic') || cmd.includes('organic farming')) {
            speak('Navigating to organic farming guide');
            window.location.href = 'organic.html';
        } else if (cmd.includes('plantation') || cmd.includes('plant guide')) {
            speak('Navigating to plantation guide');
            window.location.href = 'plantation.html';
        } else if (cmd.includes('farmer portal') || cmd.includes('farmers')) {
            speak('Navigating to farmer portal');
            window.location.href = 'farmer.html';
        } else if (cmd.includes('shopkeeper') || cmd.includes('shop keeper')) {
            speak('Navigating to shopkeeper portal');
            window.location.href = 'shopkeeper.html';
        } else if (cmd.includes('help') || cmd.includes('what can you do') || cmd.includes('рдорджрдж') || cmd.includes('рж╕рж╛рж╣рж╛ржпрзНржп') || cmd.includes('р░╕р░╣р░╛р░пр░В') || cmd.includes('рдорджрдд') || cmd.includes('роЙродро╡ро┐')) {
            speak(getTranslation('dashboardHelp'));
        } else {
            speak(getTranslation('dashboardNotUnderstood'));
        }
    }
    // General navigation commands for all pages
    else {
        if (cmd.includes('dashboard') || cmd.includes('dash board')) {
            speak('Navigating to dashboard');
            window.location.href = 'dashboard.html';
        } else if (cmd.includes('login') || cmd.includes('log in')) {
            speak('Navigating to login page');
            window.location.href = 'login.html';
        } else if (cmd.includes('about') || cmd.includes('about us')) {
            speak('Navigating to about page');
            window.location.href = 'about.html';
        } else if (cmd.includes('contact') || cmd.includes('feedback')) {
            speak('Navigating to contact page');
            window.location.href = 'feed-back.html';
        } else if (cmd.includes('weather')) {
            speak('Navigating to weather information');
            window.location.href = 'weather.html';
        } else if (cmd.includes('disease') || cmd.includes('plant disease')) {
            speak('Navigating to disease detection');
            window.location.href = 'disease.html';
        } else if (cmd.includes('organic') || cmd.includes('organic farming')) {
            speak('Navigating to organic farming guide');
            window.location.href = 'organic.html';
        } else if (cmd.includes('plantation') || cmd.includes('plant')) {
            speak('Navigating to plantation guide');
            window.location.href = 'plantation.html';
        } else if (cmd.includes('farmer') || cmd.includes('farmers')) {
            speak('Navigating to farmer portal');
            window.location.href = 'farmer.html';
        } else if (cmd.includes('shopkeeper') || cmd.includes('shop keeper')) {
            speak('Navigating to shopkeeper portal');
            window.location.href = 'shopkeeper.html';
        } else if (cmd.includes('home') || cmd.includes('homepage')) {
            speak('Navigating to homepage');
            window.location.href = 'index.html';
        } else if (cmd.includes('help') || cmd.includes('what can you do') || cmd.includes('рдорджрдж') || cmd.includes('рж╕рж╛рж╣рж╛ржпрзНржп') || cmd.includes('р░╕р░╣р░╛р░пр░В') || cmd.includes('рдорджрдд') || cmd.includes('роЙродро╡ро┐')) {
            speak(getTranslation('generalHelp'));
        } else {
            speak(getTranslation('notUnderstood'));
        }
    }
}

function updateVoiceStatus(status, text) {
    const voiceStatus = document.getElementById('voiceStatus');
    const statusText = voiceStatus?.querySelector('.status-text');
    
    if (voiceStatus && statusText) {
        voiceStatus.className = `voice-status ${status} show`;
        statusText.textContent = text;
        
        if (status === 'listening' || status === 'processing') {
            setTimeout(() => {
                voiceStatus.classList.remove('show');
            }, status === 'listening' ? 5000 : 3000);
        } else {
            setTimeout(() => {
                voiceStatus.classList.remove('show');
            }, 2000);
        }
    }
}

function startVoiceAssistant() {
    if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
        speak(getTranslation('browserNotSupported'));
        updateVoiceStatus('error', getTranslation('browserNotSupported'));
        return;
    }
    
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.lang = currentLanguage;
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    
    const voiceIcon = document.getElementById('voiceIcon');
    const voiceBtn = document.getElementById('voiceAssistant');
    
    // Update button state to listening
    if (voiceIcon && voiceBtn) {
        voiceIcon.className = 'fas fa-microphone-slash';
        voiceBtn.classList.remove('processing');
        voiceBtn.classList.add('listening');
    }
    
    updateVoiceStatus('listening', getTranslation('listening'));
    speak(getTranslation('welcome'));
    
    recognition.start();
    
    recognition.onresult = function(event) {
        const transcript = event.results[0][0].transcript.trim();
        console.log('Voice command:', transcript);
        
        // Update to processing state
        if (voiceBtn) {
            voiceBtn.classList.remove('listening');
            voiceBtn.classList.add('processing');
        }
        
        updateVoiceStatus('processing', getTranslation('processing'));
        
        setTimeout(() => {
            handleVoiceCommand(transcript);
            resetVoiceButton();
        }, 1000);
    };
    
    recognition.onerror = function(event) {
        speak(getTranslation('voiceError') + event.error);
        updateVoiceStatus('error', getTranslation('errorOccurred'));
        resetVoiceButton();
    };
    
    recognition.onend = function() {
        if (voiceBtn && voiceBtn.classList.contains('listening')) {
            resetVoiceButton();
            updateVoiceStatus('', getTranslation('clickToSpeak'));
        }
    };
}

function resetVoiceButton() {
    const voiceIcon = document.getElementById('voiceIcon');
    const voiceBtn = document.getElementById('voiceAssistant');
    
    if (voiceIcon && voiceBtn) {
        voiceIcon.className = 'fas fa-microphone';
        voiceBtn.classList.remove('listening', 'processing');
    }
}

// Language selector functionality
function initializeLanguageSelector() {
    const langToggle = document.getElementById('langToggle');
    const langDropdown = document.getElementById('langDropdown');
    const langText = document.querySelector('.lang-text');
    const langOptions = document.querySelectorAll('.lang-option');
    
    if (!langToggle || !langDropdown) return;
    
    // Set initial language
    langText.textContent = currentLangCode;
    
    // Mark current language as active
    langOptions.forEach(option => {
        if (option.dataset.lang === currentLanguage) {
            option.classList.add('active');
        }
    });
    
    // Toggle dropdown
    langToggle.addEventListener('click', (e) => {
        e.stopPropagation();
        langDropdown.classList.toggle('show');
    });
    
    // Language selection
    langOptions.forEach(option => {
        option.addEventListener('click', (e) => {
            e.stopPropagation();
            
            // Update active language
            langOptions.forEach(opt => opt.classList.remove('active'));
            option.classList.add('active');
            
            // Update global settings
            currentLanguage = option.dataset.lang;
            currentLangCode = option.dataset.code;
            
            // Save to localStorage
            localStorage.setItem('voiceLanguage', currentLanguage);
            localStorage.setItem('voiceLangCode', currentLangCode);
            
            // Update UI
            langText.textContent = currentLangCode;
            langDropdown.classList.remove('show');
            
            // Update status text
            updateVoiceStatus('', getTranslation('clickToSpeak'));
            
            // Provide feedback
            speak(getTranslation('welcome'));
        });
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', () => {
        langDropdown.classList.remove('show');
    });
}

// Show/Hide Password functionality
function initializePasswordToggle() {
    const togglePasswordBtn = document.getElementById('togglePasswordBtn');
    const passwordInput = document.getElementById('password');
    const togglePasswordIcon = document.getElementById('togglePasswordIcon');
    
    if (togglePasswordBtn && passwordInput && togglePasswordIcon) {
        togglePasswordBtn.addEventListener('click', function() {
            const isPasswordVisible = passwordInput.type === 'text';
            
            if (isPasswordVisible) {
                // Hide password
                passwordInput.type = 'password';
                togglePasswordIcon.className = 'fas fa-eye';
                togglePasswordBtn.classList.remove('active');
                togglePasswordBtn.title = 'Show Password';
            } else {
                // Show password
                passwordInput.type = 'text';
                togglePasswordIcon.className = 'fas fa-eye-slash';
                togglePasswordBtn.classList.add('active');
                togglePasswordBtn.title = 'Hide Password';
            }
        });
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Initialize language selector
    initializeLanguageSelector();
    
    // Initialize password toggle
    initializePasswordToggle();
    
    // Main app voice assistant
    const voiceAssistant = document.getElementById('voiceAssistant');
    if (voiceAssistant) {
        voiceAssistant.addEventListener('click', startVoiceAssistant);
        
        // Initialize status text
        updateVoiceStatus('', getTranslation('clickToSpeak'));
    }
});